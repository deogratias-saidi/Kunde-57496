name: Reusable WhatIf and Deploy Workflow

on:
  workflow_call: # Allows the workflow to be triggered manually
    inputs:
        deployManagementGroups:
            description: 'Run deployment for management groups'
            required: true
            type: boolean
        deployPolicyDefinitions:
            description: 'Run deployment for policy definitions'
            required: true
            type: boolean
        whatIf:
            description: 'Run WhatIf before deployment'
            required: true
            type: boolean
        environment:
            description: 'The environment where the workflow will be deployed'
            required: true
            type: string

        

jobs:
  bicep-whatif-management-groups:
    name: 'Bicep WhatIf for Management Groups'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Authenticate to Az CLI using OIDC
    - name: Login to Azure using Azure CLI with Service Principal
      run: |
        az login --service-principal \
          -u ${{ secrets.AZURE_CLIENT_ID }} \
          -p= ${{ secrets.AZURE_SECRET_ID }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}

    # Run WhatIf PowerShell script for Management Groups
    - name: Run WhatIf for Management Groups Deployment
      id: whatif-run-management-groups
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $WhatIfOutput = ./pipeline-scripts/Deploy-ALZManagementGroups.ps1 `
            -companyPrefix "${{ secrets.COMPANY_PREFIX }}" `
            -parTopLevelManagementGroupDisplayName "alz-${{ secrets.COMPANY_PREFIX }}" `
            -location "${{ secrets.LOCATION }}" `
            -WhatIf
          echo "$WhatIfOutput" > whatif_management_groups.txt
        azPSVersion: "latest"

    # Save WhatIf Output to Environment File for Management Groups
    - name: Save WhatIf Output for Management Groups
      run: echo "WHATIF_MANAGEMENT_GROUPS=$(cat whatif_management_groups.txt)" >> $GITHUB_ENV
      
    # Publish WhatIf Output for Management Groups
    - name: Publish WhatIf Output for Management Groups
      run: echo "${{ env.WHATIF_MANAGEMENT_GROUPS }}"

  bicep-deploy-management-groups:
    name: 'Bicep Deploy Management Groups'
    environment: ${{ inputs.environment }}
    needs: [bicep-whatif-management-groups]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only runs on main branch

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Authenticate to Az CLI using OIDC
    - name: Login to Azure using Azure CLI with Service Principal
      run: |
        az login --service-principal \
          -u ${{ secrets.AZURE_CLIENT_ID }} \
          -p ${{ secrets.AZURE_SECRET_ID }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}

    # Run PowerShell script for actual Management Groups deployment
    - name: Run Management Groups Deployment
      uses: azure/powershell@v1
      with:
        inlineScript: |
          ./pipeline-scripts/Deploy-ALZManagementGroups.ps1 `
            -companyPrefix "${{ secrets.COMPANY_PREFIX }}" `
            -parTopLevelManagementGroupDisplayName "alz-${{ secrets.COMPANY_PREFIX }}" `
            -location "${{ secrets.LOCATION }}"
        azPSVersion: "latest"

        
  bicep-whatif-policyDefinitions:
    name: 'Bicep WhatIf for Policy Definitions'
    runs-on: ubuntu-latest
    needs: [bicep-deploy-management-groups]
    if: github.ref == 'refs/heads/main' # Only runs on main branch

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Authenticate to Az CLI using OIDC
    - name: Login to Azure using Azure CLI with Service Principal
      run: |
        az login --service-principal \
          -u ${{ secrets.AZURE_CLIENT_ID }} \
          -p ${{ secrets.AZURE_SECRET_ID }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}

    # Run WhatIf PowerShell script for Policy Definitions
    - name: Run WhatIf for Policy Definitions Deployment
      id: whatif-run-policy-definitions
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $WhatIfOutput = ./pipeline-scripts/Deploy-ALZCustomPolicyDefinitions.ps1 `
            -companyPrefix "${{ secrets.COMPANY_PREFIX }}" `
            -location "${{ secrets.LOCATION }}" `
            -WhatIf
          echo "$WhatIfOutput" > whatif_policy_definitions.txt
        azPSVersion: "latest"

    # Save WhatIf Output to Environment File for Policy Definitions
    - name: Save WhatIf Output for Policy Definitions
      run: echo "WHATIF_POLICY_DEFINITIONS=$(cat whatif_policy_definitions.txt)" >> $GITHUB_ENV

    # Publish WhatIf Output for Policy Definitions
    - name: Publish WhatIf Output for Policy Definitions
      run: echo "${{ env.WHATIF_POLICY_DEFINITIONS }}"

  bicep-deploy-policyDefinitions:
    name: 'Bicep Deploy Policy Definitions'
    environment: ${{ inputs.environment }}
    needs: [bicep-whatif-policyDefinitions]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only runs on main branch

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Authenticate to Az CLI using OIDC
    - name: Login to Azure using Azure CLI with Service Principal
      run: |
        az login --service-principal \
          -u ${{ secrets.AZURE_CLIENT_ID }} \
          -p ${{ secrets.AZURE_SECRET_ID }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}

    # Run PowerShell script for actual Policy Definitions deployment
    - name: Run Policy Definitions Deployment
      uses: azure/powershell@v1
      with:
        inlineScript: |
          ./pipeline-scripts/Deploy-ALZCustomPolicyDefinitions.ps1 `
            -companyPrefix "${{ secrets.COMPANY_PREFIX }}" `
            -location "${{ secrets.LOCATION }}"
        azPSVersion: "latest"
