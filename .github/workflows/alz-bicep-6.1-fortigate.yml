name: Fortigate Hub and Spoke Deployment 2

on:
    workflow_dispatch:  # This makes the workflow trigger manually


jobs:
  whatIf:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
    
    - name: Accept Fortigate EULA
      uses: azure/powershell@v1
      with:
        inlineScript: |
          Get-AzMarketplaceTerms -Publisher "fortinet" -Product "fortinet_fortigate-vm_v5" -Name "fortinet_fg-vm" | Set-AzMarketplaceTerms -Accept
        azPSVersion: "latest"
    
   
    - name: Run Azure PowerShell inline script
      uses: azure/powershell@v1
      with:
        inlineScript: |
          # Run the WhatIf deployment
          ./pipeline-scripts/Deploy-ALZHubAndSpokeFortigate.ps1 `
            -companyPrefix "${{ secrets.COMPANY_PREFIX }}" `
            -platConnectivitySubcriptionId "${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}" `
            -LandingZoneCorpSubcriptionId "${{ secrets.CORP_SUBSCRIPTION_ID }}" `
            -adminUsername "${{ secrets.ADMIN_USERNAME }}" `
            -adminPassword "${{ secrets.ADMIN_PASSWORD }}" `
            -location "${{ secrets.LOCATION }}"
            -WhatIf:$True  # Pass the WhatIf switch here
        azPSVersion: "latest"

  deploy:
    name: Deploy Hub and Spoke with Fortigate
    runs-on: ubuntu-latest
    needs: [whatIf] # Ensure WhatIf completes first
    if: ${{ github.event.inputs.confirm_deployment == 'true' }}
    

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
    
    - name: Run Azure PowerShell inline script
      uses: azure/powershell@v1
      with:
        inlineScript: |
          # Run the actual deployment script
          ./pipeline-scripts/Deploy-ALZHubAndSpokeFortigate.ps1 `
            -companyPrefix "${{ secrets.COMPANY_PREFIX }}" `
            -platConnectivitySubcriptionId "${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}" `
            -LandingZoneCorpSubcriptionId "${{ secrets.CORP_SUBSCRIPTION_ID }}" `
            -adminUsername "${{ secrets.ADMIN_USERNAME }}" `
            -adminPassword "${{ secrets.ADMIN_PASSWORD }}" `
            -location "${{ secrets.LOCATION }}"
        azPSVersion: "latest"
