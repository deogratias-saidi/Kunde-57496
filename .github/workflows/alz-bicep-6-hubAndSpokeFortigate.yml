name: Deploy Hub and Spoke with Fortigate

on:
  workflow_dispatch:  # This makes the workflow trigger manually

jobs:
  whatif:
    runs-on: ubuntu-latest  # Use Ubuntu runner for Linux

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Login to Azure using Azure CLI with Service Principal
      run: |
        echo "Logging into Azure..."
        az login --service-principal \
          -u ${{ secrets.AZURE_CLIENT_ID }} \
          -p ${{ secrets.AZURE_SECRET_ID }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}
      shell: bash

    - name: Install Az PowerShell Module
      run: |
        echo "Installing Az PowerShell module..."
        Install-Module -Name Az -AllowClobber -Force -Scope CurrentUser
      shell: pwsh

    - name: Log in to Azure using PowerShell (via Azure CLI authentication)
      run: |
        $azAccessToken = az account get-access-token --query accessToken --output tsv
        $azTenantId = az account show --query tenantId --output tsv
        $azSubscriptionId = az account show --query id --output tsv
        Connect-AzAccount -AccessToken $azAccessToken -TenantId $azTenantId -AccountId $azSubscriptionId
        Set-AzContext -SubscriptionId $azSubscriptionId  
      shell: pwsh

    - name: Accept End User License Agreement for Fortinet FortiGate
      run: |
        Get-AzMarketplaceTerms -Publisher "fortinet" -Product "fortinet_fortigate-vm_v5" -Name "fortinet_fg-vm" | Set-AzMarketplaceTerms -Accept
      shell: pwsh

    - name: Make PowerShell Script Executable
      run: chmod +x ./pipeline-scripts/Deploy-ALZHubAndSpokeFortigate.ps1

    - name: Run WhatIf for Deployment
      run: |
        # Run the WhatIf deployment
        ./pipeline-scripts/Deploy-ALZHubAndSpokeFortigate.ps1 `
          -companyPrefix "${{ secrets.COMPANY_PREFIX }}" `
          -platConnectivitySubcriptionId "${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}" `
          -LandingZoneCorpSubcriptionId "${{ secrets.CORP_SUBSCRIPTION_ID }}" `
          -adminUsername "${{ secrets.ADMIN_USERNAME }}" `
          -adminPassword "${{ secrets.ADMIN_PASSWORD }}" `
          -location "${{ secrets.LOCATION }}" `
          -WhatIf  # Pass the WhatIf switch here
      shell: pwsh

  deploy:
    runs-on: ubuntu-latest
    needs: whatif  # Ensure WhatIf completes first
    if: ${{ github.event.inputs.confirm_deployment == 'true' }}  # Conditional on manual confirmation

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Login to Azure using Azure CLI with Service Principal
      run: |
        echo "Logging into Azure..."
        az login --service-principal \
          -u ${{ secrets.AZURE_CLIENT_ID }} \
          -p ${{ secrets.AZURE_SECRET_ID }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}
      shell: bash

    - name: Install Az PowerShell Module
      run: |
        echo "Installing Az PowerShell module..."
        Install-Module -Name Az -AllowClobber -Force -Scope CurrentUser
      shell: pwsh

    - name: Log in to Azure using PowerShell (via Azure CLI authentication)
      run: |
        $azAccessToken = az account get-access-token --query accessToken --output tsv
        $azTenantId = az account show --query tenantId --output tsv
        $azSubscriptionId = az account show --query id --output tsv
        Connect-AzAccount -AccessToken $azAccessToken -TenantId $azTenantId -AccountId $azSubscriptionId
        Set-AzContext -SubscriptionId $azSubscriptionId  
      shell: pwsh


    - name: Run PowerShell Script for Actual Deployment
      run: |
        # Run the actual deployment script
        ./pipeline-scripts/Deploy-ALZHubAndSpokeFortigate.ps1 `
          -companyPrefix "${{ secrets.COMPANY_PREFIX }}" `
          -platConnectivitySubcriptionId "${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}" `
          -LandingZoneCorpSubcriptionId "${{ secrets.CORP_SUBSCRIPTION_ID }}" `
          -adminUsername "${{ secrets.ADMIN_USERNAME }}" `
          -adminPassword "${{ secrets.ADMIN_PASSWORD }}" `
          -location "${{ secrets.LOCATION }}"
      shell: pwsh
