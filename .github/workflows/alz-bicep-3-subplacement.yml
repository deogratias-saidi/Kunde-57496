name: Deploy Subscription Placement

on:
  workflow_dispatch:  # This makes the workflow trigger manually

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}
  COMPANY_PREFIX: ${{ secrets.COMPANY_PREFIX }}
  LANDING_ZONE_ONLINE_SUBSCRIPTION_ID: ${{ secrets.ONLINE_SUBSCRIPTION_ID }}
  LANDING_ZONE_CORP_SUBSCRIPTION_ID: ${{ secrets.CORP_SUBSCRIPTION_ID }}
  PLAT_CONNECTIVITY_SUBSCRIPTION_ID: ${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}
  PLAT_MANAGEMENT_SUBSCRIPTION_ID: ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Login to Azure using Azure CLI with Service Principal
      run: |
        az login --service-principal \
          -u ${{ secrets.AZURE_CLIENT_ID }} \
          -p ${{ secrets.AZURE_SECRET_ID }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}

    - name: Install Az PowerShell Module
      run: |
        Install-Module -Name Az -AllowClobber -Force -Scope CurrentUser
      shell: pwsh

    - name: Log in to Azure using PowerShell (via Azure CLI authentication)
      run: |
        $azAccessToken = az account get-access-token --query accessToken --output tsv
        $azTenantId = az account show --query tenantId --output tsv
        Connect-AzAccount -AccessToken $azAccessToken -TenantId $azTenantId
      shell: pwsh

    - name: Run WhatIf to Validate the Deployment
      id: whatif
      run: |
        $inputObject = @{
            DeploymentName        = -join ('alz-SubscriptionPlacementDeployment-{0}' -f (Get-Date -Format 'yyyyMMddTHHMMssffffZ'))[0..63]
            Location              = 'norwayeast'
            ManagementGroupId     = 'alz'
            TemplateFile          = "./config/orchestration/subscription/subscriptionPlacement.main.bicep"

            # Pass additional parameters inline
            parCompanyPrefix = '${{ secrets.COMPANY_PREFIX }}'
            parTopLevelManagementGroupPrefix = 'alz'
            parTopLevelManagementGroupDisplayName = 'alz-${{ secrets.COMPANY_PREFIX }}'
            parPlatformMgmtAlzDefaultsEnable = $true
            parLandingZoneMgAlzDefaultsEnable = $true
            parSandboxMgDefaultsEnable = $true
            parDecommissionedMgDefaultsEnable = $true
            parLandingZoneMgConfidentialEnable = $false
            
            # Subscription parameters
            parLandingZoneOnlineSubcriptionId = '${{ secrets.ONLINE_SUBSCRIPTION_ID }}'
            parLandingZoneCorpSubcriptionId = '${{ secrets.CORP_SUBSCRIPTION_ID }}'
            parPlatConnectivitySubcriptionId = '${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}'
            parPlatManagementSubcriptionId = '${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}'
        }

        try {
          # Run WhatIf
          New-AzManagementGroupDeployment @inputObject -WhatIf
        }
        catch {
          Write-Error "WhatIf validation failed. Stopping deployment."
          exit 1  # Exit with an error code to stop the pipeline if WhatIf fails
        }
      shell: pwsh

    - name: Proceed with Actual Deployment if WhatIf Passes
      if: ${{ success() }}  # Only run if the WhatIf step succeeded
      run: |
        $inputObject = @{
            DeploymentName        = -join ('alz-SubscriptionPlacementDeployment-{0}' -f (Get-Date -Format 'yyyyMMddTHHMMssffffZ'))[0..63]
            Location              = 'norwayeast'
            ManagementGroupId     = 'alz'
            TemplateFile          = "./config/orchestration/subscription/subscriptionPlacement.main.bicep"

            # Pass additional parameters inline
            parCompanyPrefix = '${{ secrets.COMPANY_PREFIX }}'
            parTopLevelManagementGroupPrefix = 'alz'
            parTopLevelManagementGroupDisplayName = 'alz-${{ secrets.COMPANY_PREFIX }}'
            parPlatformMgmtAlzDefaultsEnable = $true
            parLandingZoneMgAlzDefaultsEnable = $true
            parSandboxMgDefaultsEnable = $true
            parDecommissionedMgDefaultsEnable = $true
            parLandingZoneMgConfidentialEnable = $false
            
            # Subscription parameters
            parLandingZoneOnlineSubcriptionId = '${{ secrets.ONLINE_SUBSCRIPTION_ID }}'
            parLandingZoneCorpSubcriptionId = '${{ secrets.CORP_SUBSCRIPTION_ID }}'
            parPlatConnectivitySubcriptionId = '${{ secrets.CONNECTIVITY_SUBSCRIPTION_ID }}'
            parPlatManagementSubcriptionId = '${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}'
        }

        # Run the actual deployment
        New-AzManagementGroupDeployment @inputObject
      shell: pwsh
