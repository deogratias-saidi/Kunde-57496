name: Deploy Logging Solution

on:
  workflow_dispatch: 

jobs:
  deploy-whatif-logging-solution:
    name: "WhatIf for logging solution"
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout repository
        uses: actions/checkout@v3

      # Authenticate to Azure
      - name: "Az CLI login"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      # Check if required management groups exist
      - name: Check if Connectivity and Corp Management groups exist
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $platformConnectivityGroup = "alz-${{ secrets.COMPANY_PREFIX }}-platform-connectivity"
            $landingZoneCorpGroup = "alz-${{ secrets.COMPANY_PREFIX }}-landingzones-corp"
            $platformManagementGroup = "alz-${{ secrets.COMPANY_PREFIX }}-platform-management"
            $landingZoneOnlineGroup = "alz-${{ secrets.COMPANY_PREFIX }}-landingzones-online"

            $platformConnectivityGroupExists = Get-AzManagementGroup -GroupName $platformConnectivityGroup -ErrorAction SilentlyContinue
            $landingZoneCorpGroupExists = Get-AzManagementGroup -GroupName $landingZoneCorpGroup -ErrorAction SilentlyContinue
            $platformManagementGroupExists = Get-AzManagementGroup -GroupName $platformManagementGroup -ErrorAction SilentlyContinue
            $landingZoneOnlineGroupExists = Get-AzManagementGroup -GroupName $landingZoneOnlineGroup -ErrorAction SilentlyContinue

            if (-not $platformConnectivityGroupExists) {
              throw "Management group '$platformConnectivityGroup' does not exist"
            }

            if (-not $landingZoneCorpGroupExists) {
              throw "Management group '$landingZoneCorpGroup' does not exist"
            }

            if (-not $platformManagementGroupExists) {
              throw "Management group '$platformManagementGroup' does not exist"
            }

            if (-not $landingZoneOnlineGroupExists) {
              throw "Management group '$landingZoneOnlineGroup' does not exist"
            }
          azPSVersion: "latest"

      # Run WhatIf to validate the deployment
      - name: Run WhatIf for logging solution Deployment
        id: whatif-run-subscription-placement
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $WhatIfOutput = ./pipeline-scripts/Deploy-ALZLoggin.ps1 `
              -parCompanyPrefix "${{ secrets.COMPANY_PREFIX }}" `
              -parTargetManagementGroupId "${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}" `
              -location "${{ secrets.LOCATION }}" `
              -WhatIf

            echo "$WhatIfOutput" > whatif_subscription_placement.txt
          azPSVersion: "latest"

      # Save WhatIf Output to Environment File for Subscription Placement
      - name: Save WhatIf Output for Subscription Placement
        run: echo "WHATIF_SUBSCRIPTION_PLACEMENT=$(cat whatif_subscription_placement.txt)" >> $GITHUB_ENV

      # Publish WhatIf Output for Subscription Placement
      - name: Publish WhatIf Output for Subscription Placement
        run: echo "${{ env.WHATIF_SUBSCRIPTION_PLACEMENT }}"

  bicep-deploy-loggings-solution:
    name: "Bicep Deploy Logging Solution"
    environment: prod
    needs: [deploy-whatif-logging-solution]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only runs on the main branch

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout repository
        uses: actions/checkout@v3

      # Authenticate to Az CLI using OIDC
      - name: "Az CLI login"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      # Proceed with actual deployment if WhatIf passes
      - name: Run Subscription Placement Deployment
        uses: azure/powershell@v1
        with:
          inlineScript: |
            ./pipeline-scripts/Deploy-ALZLoggin.ps1 `
              -parCompanyPrefix "${{ secrets.COMPANY_PREFIX }}" `
              -parTargetManagementGroupId "${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}" `
              -location "${{ secrets.LOCATION }}"
          azPSVersion: "latest"
