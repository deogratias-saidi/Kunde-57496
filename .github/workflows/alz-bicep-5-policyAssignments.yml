name: Deploy Policy Assignments

on:
  workflow_dispatch:


jobs:
  bicep-whatif-for-policy-assignments:
    name: 'Bicep WhatIf'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Authenticate to Az CLI using OIDC
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 

    - name: Check if Management Management groups exist
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $platformManagementGroup = "alz-${{ secrets.COMPANY_PREFIX }}-platform-management"
          
          $platformManagementGroupExists = Get-AzManagementGroup -GroupName $platformManagementGroup -ErrorAction SilentlyContinue
          
          if (-not $platformManagementGroupExists) {
            throw "Management group '$platformManagementGroup' does not exist"
          }

          
         
        azPSVersion: "latest"

    # Run WhatIf PowerShell script
    - name: Run WhatIf for Policy Assignments Deployment
      uses: azure/powershell@v1
      with:
        inlineScript: |
          ./pipeline-scripts/Deploy-ALZPolicyAssignments.ps1 `
            -companyPrefix "${{ secrets.COMPANY_PREFIX }}" `
            -location "${{ secrets.LOCATION }}" `
            -parPlatManagementSubcriptionId "${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}" `
            -WhatIf
        azPSVersion: "latest"

    # Capture WhatIf output (optional)
    - name: Capture WhatIf Output
      id: whatif-output
      run: |
        echo "WhatIf complete"

  bicep-deploy-policy-assignments:
    name: 'Bicep Deploy Policy Assignments'
    environment: prod
    needs: [bicep-whatif-for-policy-assignments]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only runs on main branch

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Authenticate to Az CLI using OIDC
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true

    # Run PowerShell script for actual deployment
    - name: Run Policy Assignments Deployment
      uses: azure/powershell@v1
      with:
        inlineScript: |
          -companyPrefix "${{ secrets.COMPANY_PREFIX }}" `
          -location "${{ secrets.LOCATION }}" `
          -parPlatManagementSubcriptionId "${{ secrets.MANAGEMENT_SUBSCRIPTION_ID }}" `
        azPSVersion: "latest"